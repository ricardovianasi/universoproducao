<?php
/**
 * Created by PhpStorm.
 * User: ricardo
 * Date: 03/05/2018
 * Time: 09:37
 */

namespace Admin\Form\SessionSchool;


use Admin\Form\Programing\ProgramingFieldset;
use Application\Entity\Event\Event;
use Application\Entity\Event\EventType;
use Application\Entity\Movie\Movie;
use Application\Entity\Movie\MovieEventStatus;
use Application\Entity\Programing\Meta;
use Application\Entity\Programing\Programing;
use Application\Entity\Programing\Type;
use Application\Entity\Registration\Registration;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\Feed\Reader\Collection;
use Zend\Form\Form;
use Zend\InputFilter\Factory as InputFilterFactory;

class SessionSchoolSearchForm extends Form
{
    private $entityManager;

    public function __construct($em)
    {
        if ($em) {
            $this->entityManager = $em;
        }

        parent::__construct('session-school-search-form');
        $this->setAttributes([
            'method' => 'GET',
            'class' => ' form-reload default-form-actions enable-validators nestable-serialize-form'
        ]);

        $this->add([
            'type' => 'Select',
            'name' => 'event',
            'options' => [
                'empty_option' => 'Selecione o evento',
                'value_options' => $this->populateEvents()
            ],
            'attributes' => [
                'data-label' => 'Evento',
                'id' => 'event'
            ]
        ]);

        $this->add([
            'name' => 'name',
            'options' => [
                'label' => 'Nome',
            ],
            'attributes' => [
                'placeholder' => 'Nome da sessÃ£o',
            ]
        ]);
    }

    public function setData($data)
    {
        return parent::setData($data); // TODO: Change the autogenerated stub
    }

    /**
     * @return null
     */
    public function getEntityManager()
    {
        return $this->entityManager;
    }

    /**
     * @param null $entityManager
     */
    public function setEntityManager($entityManager)
    {
        $this->entityManager = $entityManager;
    }

    public function populateEvents()
    {
        $options = [];

        if($this->getEntityManager()) {
            $events = $this
                ->getEntityManager()
                ->getRepository(Event::class)
                ->findBy([], ['startDate'=>'DESC']);

            foreach ($events as $p) {
                if(!key_exists($p->getType(), $options)) {
                    $options[$p->getType()] = [
                        'label' => EventType::get($p->getType()),
                        'options' => []
                    ];
                }
                $options[$p->getType()]['options'][$p->getId()] = $p->getShortName();
            }
        }

        return $options;
    }
}